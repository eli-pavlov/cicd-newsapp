name: Build & Push Frontend Image

on:
  repository_dispatch:
    types: [frontend]
  push:
    branches: [main, development]
    paths:
      - "frontend/**"
      - ".github/workflows/front_end.yml"
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the frontend source repository (e.g., ghGill/newsAppFront)"
        required: true
        default: "ghGill/newsAppFront"
        type: string
      source_ref:
        description: "Git ref to build (branch, tag, or commit SHA, e.g., main, v1.0.0, abc1234)"
        required: true
        default: "main"
        type: string
      app_name:
        description: "Application name used in the Docker image (e.g., newsapp-frontend)"
        required: true
        default: "newsapp-frontend"
        type: string

permissions:
  contents: read
  packages: write

concurrency:
  group: cicd-${{ github.workflow }}-manifests
  cancel-in-progress: false

env:
  MANIFEST_APP_DEFAULT: newsapp-frontend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  MANIFESTS_BRANCH: main
  YQ_VERSION: v4.44.3

jobs:
  docker:
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'frontend')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (CI/CD repo)
        uses: actions/checkout@v4

      - name: Guard required secrets
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || \
             [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] || \
             [ -z "${{ secrets.MANIFESTS_REPO }}" ] || \
             [ -z "${{ secrets.GH_TOKEN }}" ]; then
            echo "::error::Missing one or more required secrets: DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, MANIFESTS_REPO, GH_TOKEN"
            exit 1
          fi

      - name: Resolve context
        id: ctx
        shell: bash
        env:
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
          CP_REPO:  ${{ github.event.client_payload.source_repo }}
          CP_REF:   ${{ github.event.client_payload.source_ref }}
          CP_APP:   ${{ github.event.client_payload.app_name }}
        run: |
          set -euo pipefail
          SRC_REPO="${INP_REPO:-${CP_REPO:-ghGill/newsAppFront}}"
          SRC_REF="${INP_REF:-${CP_REF:-${GITHUB_REF_NAME:-main}}}"
          APP="${INP_APP:-${CP_APP:-$MANIFEST_APP_DEFAULT}}"
          IMAGE="${DOCKERHUB_USER}/${APP}"
          {
            echo "src_repo=${SRC_REPO}"
            echo "src_ref=${SRC_REF}"
            echo "app=${APP}"
            echo "image=${IMAGE}"
          } >> "$GITHUB_OUTPUT"

      - name: Checkout frontend source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.src_repo }}
          ref: ${{ steps.ctx.outputs.src_ref }}
          path: src

      - name: Prepare build context
        run: |
          mkdir -p src/nginx
          cp -r frontend/nginx/* src/nginx/
          cp frontend/Dockerfile src/Dockerfile
          if [ -f frontend/.dockerignore ]; then cp frontend/.dockerignore src/.dockerignore; fi

      - name: Compute image tags
        id: compute-tags
        shell: bash
        run: |
          set -euo pipefail
          COMMIT=$(git -C src rev-parse HEAD)
          SHORT=${COMMIT:0:7}
          REF="${{ steps.ctx.outputs.src_ref }}"
          BASE="${REF##*/}"
          if [[ "$BASE" == "main" || "$BASE" == "master" ]]; then
            TAG="latest-${SHORT}"
            IS_LATEST="true"
          else
            TAG="dev-${SHORT}"
            IS_LATEST="false"
          fi
          {
            echo "commit=${COMMIT}"
            echo "tag=${TAG}"
            echo "is_latest=${IS_LATEST}"
            echo "branch=${BASE}"
          } >> "$GITHUB_OUTPUT"

      - name: Resolve deploy environment
        id: deploy
        shell: bash
        env:
          IS_LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          if [[ "${IS_LATEST}" == "true" ]]; then
            echo "env=prod" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=default" >> "$GITHUB_OUTPUT"
            echo "values_suffix=prod" >> "$GITHUB_OUTPUT"
          else
            echo "env=dev" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=development" >> "$GITHUB_OUTPUT"
            echo "values_suffix=dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Assemble tags
        id: tags
        shell: bash
        env:
          IMAGE: ${{ steps.ctx.outputs.image }}
          TAG:   ${{ steps.compute-tags.outputs.tag }}
          LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          {
            echo "tags<<EOF"
            echo "${IMAGE}:${TAG}"
            if [[ "${LATEST}" == "true" ]]; then
              echo "${IMAGE}:latest"
            fi
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./src
          file: ./src/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VITE_SERVER_URL=/api
            VITE_NEWS_INTERVAL_IN_MIN=5
          tags: ${{ steps.tags.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.compute-tags.outputs.commit }}

      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq
        run: |
          set -e
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Validate Backend Service
        working-directory: manifests
        env:
          BACKEND_FILE: values/backend/${{ steps.deploy.outputs.values_suffix }}.yaml
        run: |
          set -euo pipefail
          test -f "${BACKEND_FILE}" || { echo "::error::Missing ${BACKEND_FILE} in manifests repo"; exit 1; }
          BACKEND_NAME=$(yq -r '.backend.fullnameOverride // .backend.app.name // "backend"' "${BACKEND_FILE}")
          BACKEND_PORT=$(yq -r '.backend.service.port // 8080' "${BACKEND_FILE}")
          if [ -z "$BACKEND_NAME" ] || [ -z "$BACKEND_PORT" ]; then
            echo "::error::Failed to extract backend service details from ${BACKEND_FILE}"
            exit 1
          fi
          echo "Validated backend service: ${BACKEND_NAME}:${BACKEND_PORT}"

      - name: Update manifests and lint Helm chart
        working-directory: manifests
        env:
          IMAGE_REPO: ${{ steps.ctx.outputs.image }}
          IMAGE_TAG:  ${{ steps.compute-tags.outputs.tag }}
          SUFFIX:     ${{ steps.deploy.outputs.values_suffix }}
          K8S_NS:     ${{ steps.deploy.outputs.k8s_ns }}
          BRANCH:     ${{ env.MANIFESTS_BRANCH }}
        run: |
          set -euo pipefail

          BACKEND_FILE="values/backend/${SUFFIX}.yaml"
          FRONTEND_FILE="values/frontend/${SUFFIX}.yaml"
          test -f "${BACKEND_FILE}"  || { echo "::error::Missing ${BACKEND_FILE} in manifests repo"; exit 1; }
          test -f "${FRONTEND_FILE}" || { echo "::error::Missing ${FRONTEND_FILE} in manifests repo"; exit 1; }

          BACKEND_NAME=$(yq -r '.backend.fullnameOverride // .backend.app.name // "backend"' "${BACKEND_FILE}")
          BACKEND_PORT=$(yq -r '.backend.service.port // 8080' "${BACKEND_FILE}")
          BACKEND_HOST="${BACKEND_NAME}.${K8S_NS}.svc.cluster.local"

          # Update values
          yq -i '
            .frontend.image.repository = strenv(IMAGE_REPO) |
            .frontend.image.tag        = strenv(IMAGE_TAG)  |
            .frontend.env.plain.VITE_SERVER_URL = "/api" |
            .frontend.env.plain.VITE_NEWS_INTERVAL_IN_MIN = "5" |
            .frontend.env.plain.BACKEND_SERVICE_HOST = strenv(BACKEND_HOST) |
            .frontend.env.plain.BACKEND_SERVICE_PORT = strenv(BACKEND_PORT)
          ' "${FRONTEND_FILE}"

          # Ensure the umbrella chart has a charts/ directory
          mkdir -p charts/newsapp/charts

          # Package local subcharts (if present) into the umbrella chart charts/ folder
          for sub in charts/app charts/postgres charts/backend charts/frontend; do
            if [ -d "$sub" ]; then
              echo "Packaging $sub into charts/newsapp/charts"
              helm package "$sub" -d charts/newsapp/charts
            fi
          done

          # Build dependencies for the umbrella chart from local packaged charts
          helm dependency build charts/newsapp

          # Lint the umbrella chart using the updated local dependencies
          echo "Linting Helm chart..."
          helm lint charts/newsapp \
            --values "${BACKEND_FILE}" \
            --values "${FRONTEND_FILE}"

          # Safe commit & push (rebase to avoid races)
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "${BRANCH}"
          git rebase origin/"${BRANCH}" || { git rebase --abort || true; git pull --no-rebase || true; }
          git add "${FRONTEND_FILE}"
          git commit -m "ci: frontend ${SUFFIX} -> ${IMAGE_REPO}:${IMAGE_TAG}, proxy ${BACKEND_HOST}:${BACKEND_PORT}" || echo "No changes to commit"
          git push origin "${BRANCH}"
