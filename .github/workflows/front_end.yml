name: Build & Push Frontend Image

on:
  repository_dispatch:
    types: [build-frontend]
  push:
    branches: [main, development]
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the source (backend) repository"
        required: true
        default: "ghGill/newsAppFront"
        type: string
      source_ref:
        description: "Ref to build (HEAD, branch, tag, or commit SHA)"
        required: true
        default: "HEAD"
        type: string
      app_name:
        description: "App name used in image name"
        required: true
        default: "newsapp-frontend"
        type: string

permissions:
  contents: read
  packages: write

env:
  MANIFEST_APP_DEFAULT: newsapp-frontend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (infra repo)
        uses: actions/checkout@v4

      - name: Resolve context (dispatch or manual)
        id: ctx
        shell: bash
        env:
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
        run: |
          set -euo pipefail
          SRC_REPO="${INP_REPO:-${{ github.event.client_payload.SOURCE_REPO || '' }}}"
          SRC_REF="${INP_REF:-${{ github.event.client_payload.BRANCH_NAME || '' }}}"
          APP="${INP_APP:-${{ github.event.client_payload.APP_NAME || '' }}}"
          [ -z "${SRC_REPO}" ] && SRC_REPO="ghGill/newsAppFront"
          [ -z "${SRC_REF}" ] && SRC_REF="${GITHUB_REF_NAME:-HEAD}"
          [ -z "${APP}" ] && APP="${MANIFEST_APP_DEFAULT}"
          echo "src_repo=${SRC_REPO}" >> $GITHUB_OUTPUT
          echo "src_ref=${SRC_REF}"  >> $GITHUB_OUTPUT
          echo "app=${APP}"          >> $GITHUB_OUTPUT
          IMAGE="${DOCKERHUB_USER}/${APP}"
          echo "image=${IMAGE}"      >> $GITHUB_OUTPUT

          # Set tags based on branch name
          BRANCH_NAME="${{ github.event.client_payload.BRANCH_NAME || GITHUB_REF_NAME }}"
          COMMIT_SHA="${{ github.event.client_payload.COMMIT_SHA || GITHUB_SHA }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
            TAG="latest-${SHORT_SHA}"
            IS_LATEST="true"
          else
            TAG="dev-${SHORT_SHA}"
            IS_LATEST="false"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "is_latest=${IS_LATEST}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT_SHA}" >> $GITHUB_OUTPUT
      
      # ⚠️ Add this missing checkout step!
      - name: Checkout frontend source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.src_repo }}
          ref: ${{ steps.ctx.outputs.src_ref }}
          path: src

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./src # ⚠️ Corrected path to source code
          file: ./frontend/Dockerfile # ⚠️ Corrected path to Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # The logic for build-args seems fine, but the ctx outputs were incomplete
          build-args: |
            ${{ inputs.vite_server_url && format('VITE_SERVER_URL={0}', inputs.vite_server_url) || '' }}
            ${{ inputs.vite_news_interval && format('VITE_NEWS_INTERVAL_IN_MIN={0}', inputs.vite_news_interval) || '' }}
          tags: |
            ${{ steps.ctx.outputs.image }}:${{ steps.ctx.outputs.tag }}
            ${{ steps.ctx.outputs.is_latest == 'true' && format('{0}:latest', steps.ctx.outputs.image) || '' }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.ctx.outputs.commit }}

      # -------------------------------------------------------------------
      # K8s + manifests update
      # -------------------------------------------------------------------
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq
        run: |
          YQ_VERSION=v4.44.1
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Update frontend dev values (image + VITE_* envs)
        working-directory: manifests
        env:
          IMAGE_REPO: ${{ steps.ctx.outputs.image }} # ⚠️ Corrected hardcoded value
          IMAGE_TAG:  ${{ steps.ctx.outputs.tag }}  # ⚠️ Corrected hardcoded value
          NODE2_IP:   ${{ vars.NODE2_IP }}
        run: |
          set -e
          SERVER_URL="http://${NODE2_IP}:30001"

          yq -i '
            .image.repository = strenv(IMAGE_REPO) |
            .image.tag        = strenv(IMAGE_TAG)   |
            .env.plain.VITE_SERVER_URL = strenv(SERVER_URL) |
            .env.plain.VITE_NEWS_INTERVAL_IN_MIN = "5"
          ' values/frontend/dev.yaml

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add values/frontend/dev.yaml
          git commit -m "ci: frontend dev -> ${IMAGE_REPO}:${IMAGE_TAG}, VITE_SERVER_URL=${SERVER_URL}" || echo "No changes"
          git push origin main