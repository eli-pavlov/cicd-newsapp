# name: Build, Test, & Push Frontend Image
# ---------------------------------------------------------------------
# Purpose:
# - CI workflow to build, test, push a frontend Docker image and update K8s manifests
# - Triggers: push to frontend paths, repository_dispatch (frontend), manual workflow_dispatch
# Notes & best-practice suggestions:
# - Secrets are validated early to fail fast.
# - Build/test/push are separated into jobs with artifacts used to pass metadata between them.
# - Consider pinning actions to specific SHAs for maximum supply-chain stability when needed.
# - Keep the original logic and indentation unchanged; only explanatory comments were added.
# ---------------------------------------------------------------------

name: Build, Test, & Push Frontend Image

on:
  repository_dispatch:
    types: [frontend]
  push:
    branches: [main, development]
    paths:
      - "frontend/**"
      - ".github/workflows/front_end.yml"
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the frontend source repository (e.g., ghGill/newsAppFront)"
        required: true
        default: "ghGill/newsAppFront"
        type: string
      source_ref:
        description: "Git ref to build (branch, tag, or commit SHA, e.g., main, v1.0.0, abc1234)"
        required: true
        default: "main"
        type: string
      app_name:
        description: "Application name used in the Docker image (e.g., newsapp-frontend)"
        required: true
        default: "newsapp-frontend"
        type: string

# Permissions: minimal scopes required for the workflow operations
permissions:
  contents: read
  packages: write

concurrency:
  # Using workflow name + ref avoids accidental concurrent builds for the same ref.
  # cancel-in-progress: true cancels previous runs in the same group, helpful for frequent pushes.
  group: cicd-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Defaults and pinned tool versions
  MANIFEST_APP_DEFAULT: newsapp-frontend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  MANIFESTS_BRANCH: main
  YQ_VERSION: v4.44.3

jobs:
  build:
    name: Build Frontend Image
    # Run only for the intended event types
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'frontend')
    runs-on: ubuntu-latest
    outputs:
      # These outputs are primarily for reference; artifact passing is the more reliable approach.
      image_tag: ${{ steps.ctx.outputs.image }}:${{ steps.compute-tags.outputs.tag }}

    steps:
      - name: Checkout (CI/CD repo)
        uses: actions/checkout@v4

      - name: Guard required secrets
        # Fail early if any required secret is missing â€” prevents confusing mid-run failures.
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || \
             [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] || \
             [ -z "${{ secrets.MANIFESTS_REPO }}" ] || \
             [ -z "${{ secrets.GH_TOKEN }}" ]; then
            echo "::error::Missing one or more required secrets"
            exit 1
          fi
      - name: Resolve context
        id: ctx
        # Normalize inputs (workflow_dispatch inputs) and payload (repository_dispatch) into canonical variables.
        shell: bash
        env:
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
          CP_REPO:  ${{ github.event.client_payload.source_repo }}
          CP_REF:   ${{ github.event.client_payload.source_ref }}
          CP_APP:   ${{ github.event.client_payload.app_name }}
        run: |
          set -euo pipefail
          SRC_REPO="${INP_REPO:-${CP_REPO:-ghGill/newsAppFront}}"
          SRC_REF="${INP_REF:-${CP_REF:-${GITHUB_REF_NAME:-main}}}"
          APP="${INP_APP:-${CP_APP:-$MANIFEST_APP_DEFAULT}}"
          IMAGE="${DOCKERHUB_USER}/${APP}"
          {
            echo "src_repo=${SRC_REPO}"
            echo "src_ref=${SRC_REF}"
            echo "app=${APP}"
            echo "image=${IMAGE}"
          } >> "$GITHUB_OUTPUT"
      - name: Checkout frontend source repo
        # Checkout the source to `src/` so the build context is isolated from the workflow repo.
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.src_repo }}
          ref: ${{ steps.ctx.outputs.src_ref }}
          path: src

      - name: Prepare build context
        # Copy nginx files and Dockerfile into src/ so the build context contains what is needed.
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p src/nginx
          if [ -d "frontend/nginx" ]; then
            cp -r frontend/nginx/* src/nginx/
          fi
          if [ -f frontend/Dockerfile ]; then
            cp frontend/Dockerfile src/Dockerfile
          else
            echo "::error::No Dockerfile found"
            exit 1
          fi
          if [ -f frontend/.dockerignore ]; then
            cp frontend/.dockerignore src/.dockerignore
          fi
      - name: Compute image tags
        id: compute-tags
        # Determine commit SHA and tag naming convention; use `latest-<sha>` for main/master, else `dev-<sha>`.
        shell: bash
        run: |
          set -euo pipefail
          COMMIT=$(git -C src rev-parse HEAD)
          SHORT=${COMMIT:0:7}
          REF="${{ steps.ctx.outputs.src_ref }}"
          BASE="${REF##*/}"
          if [[ "$BASE" == "main" || "$BASE" == "master" ]]; then
            TAG="latest-${SHORT}"
            IS_LATEST="true"
          else
            TAG="dev-${SHORT}"
            IS_LATEST="false"
          fi
          {
            echo "commit=${COMMIT}"
            echo "tag=${TAG}"
            echo "is_latest=${IS_LATEST}"
            echo "branch=${BASE}"
          } >> "$GITHUB_OUTPUT"
      - name: Resolve deploy environment
        id: deploy
        # Map `is_latest` to environment names and K8s namespace / values suffix conventions.
        shell: bash
        env:
          IS_LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          if [[ "${IS_LATEST}" == "true" ]]; then
            echo "env=prod" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=default" >> "$GITHUB_OUTPUT"
            echo "values_suffix=prod" >> "$GITHUB_OUTPUT"
          else
            echo "env=dev" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=development" >> "$GITHUB_OUTPUT"
            echo "values_suffix=dev" >> "$GITHUB_OUTPUT"
          fi
      - name: Assemble tags for build & push
        id: tags
        # Compose tag list for build-push-action.
        shell: bash
        env:
          IMAGE: ${{ steps.ctx.outputs.image }}
          TAG:   ${{ steps.compute-tags.outputs.tag }}
          LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          {
            echo "tags<<EOF"
            echo "${IMAGE}:${TAG}"
            if [[ "${LATEST}" == "true" ]]; then
              echo "${IMAGE}:latest"
            fi
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        # QEMU is required for emulating other architectures when building multi-arch images.
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # Buildx is required for multi-arch builds and caching.
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        # Authenticate to Docker Hub before pushing images.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        # Multi-arch build and push. Uses GitHub Actions cache for build layers.
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./src
          file: ./src/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            VITE_SERVER_URL=/api
            VITE_NEWS_INTERVAL_IN_MIN=5
            VITE_FRONTEND_GIT_BRANCH=${{ steps.compute-tags.outputs.branch }}
            VITE_FRONTEND_GIT_COMMIT=${{ steps.compute-tags.outputs.commit }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.compute-tags.outputs.commit }}

      - name: Save context for downstream jobs
        # Persist lightweight metadata to an artifact for downstream jobs (test & push).
        shell: bash
        run: |
          echo "IMAGE_TAG_FULL=${{ steps.ctx.outputs.image }}:${{ steps.compute-tags.outputs.tag }}" > context.env
          echo "IMAGE_REPO=${{ steps.ctx.outputs.image }}" >> context.env
          echo "IMAGE_TAG_ONLY=${{ steps.compute-tags.outputs.tag }}" >> context.env
          echo "IS_LATEST=${{ steps.compute-tags.outputs.is_latest }}" >> context.env
          echo "VALUES_SUFFIX=${{ steps.deploy.outputs.values_suffix }}" >> context.env
          echo "BRANCH=${{ steps.compute-tags.outputs.branch }}" >> context.env
          echo "COMMIT=${{ steps.compute-tags.outputs.commit }}" >> context.env
          echo "SRC_REPO=${{ steps.ctx.outputs.src_repo }}" >> context.env
          echo "K8S_NS=${{ steps.deploy.outputs.k8s_ns }}" >> context.env

      - name: Upload context artifact
        # Upload artifact so downstream jobs can retrieve the build metadata reliably.
        uses: actions/upload-artifact@v4
        with:
          name: job-context-frontend
          path: context.env

      - name: Pull pushed image and export tar for test job
        # After push, pull the pushed image tag and save as image.tar so the existing test job (unchanged) can load it.
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${{ steps.ctx.outputs.image }}:${{ steps.compute-tags.outputs.tag }}"
          echo "Pulling pushed image ${IMAGE} to ensure registry has it..."
          docker pull "${IMAGE}"
          echo "Saving ${IMAGE} to image.tar"
          docker save -o image.tar "${IMAGE}"

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: image.tar

  test:
    name: Test Frontend Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download context artifact
        uses: actions/download-artifact@v4
        with:
          name: job-context-frontend

      - name: Load context into environment
        shell: bash
        run: |
          set -euo pipefail
          # context.env is produced by the build job and contains IMAGE_TAG_FULL
          if [ -f context.env ]; then
            echo "Loading build context into environment"
            cat context.env >> $GITHUB_ENV
          else
            echo "context.env not found; IMAGE_TAG_FULL may be undefined"
          fi

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image

      - name: Load image into docker
        shell: bash
        run: |
          set -euo pipefail
          [ -f ./image.tar ] || { echo "image.tar not found"; exit 1; }
          docker load -i ./image.tar
          # remove tar to save disk
          rm -f ./image.tar || true

      - name: Run frontend container and test
        shell: bash
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail

          # Primary: use IMAGE_TAG_FULL injected from context.env
          IMAGE_FULL="${IMAGE_TAG_FULL:-}"

          # If IMAGE_FULL is empty, try to auto-detect a recently-loaded image
          if [ -z "$IMAGE_FULL" ]; then
            echo "WARNING: IMAGE_FULL not set from context.env. Attempting to auto-detect a loaded image..."
            # find image with dev- or latest- tag pattern (last loaded)
            IMAGE_FULL=$(docker images --format '{{.Repository}}:{{.Tag}} {{.CreatedAt}}' | \
              egrep 'dev-|latest-' | sort -k2 -r | head -n1 | awk '{print $1}' || true)
            if [ -z "$IMAGE_FULL" ]; then
              echo "::error::Could not determine IMAGE_FULL. Aborting."
              docker images --format 'REPO:TAG\t{{.Repository}}:{{.Tag}}' || true
              exit 1
            fi
            echo "Auto-detected image: $IMAGE_FULL"
          else
            echo "Using IMAGE_FULL from context: $IMAGE_FULL"
          fi

          CONTAINER_NAME="ci-test-frontend"
          NET="ci-net-${GITHUB_RUN_ID}"
          MOCK_NAME="ci-backend-mock"

          docker network create "${NET}" >/dev/null 2>&1 || true
          docker run -d --name "${MOCK_NAME}" --network "${NET}" python:3.11-alpine sh -c "python -m http.server 3000" >/dev/null

          docker run -d --name "${CONTAINER_NAME}" \
            --network "${NET}" \
            -p "8080:8080" \
            -e BACKEND_SERVICE_HOST="${MOCK_NAME}" \
            -e BACKEND_SERVICE_PORT="3000" \
            "${IMAGE_FULL}"

          echo "Waiting for frontend container to start (with retries)..."
          http_code=""
          for i in $(seq 1 12); do
            http_code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8080/" || true)
            if [[ "$http_code" =~ ^(2|3|4)[0-9]{2}$ ]]; then
              echo "Success: frontend responded with HTTP ${http_code}"
              break
            fi
            echo "Not ready yet (attempt $i/12). HTTP=${http_code:-none}. Sleeping 5s..."
            sleep 5
          done

          if ! [[ "$http_code" =~ ^(2|3|4)[0-9]{2}$ ]]; then
            echo "::error::Frontend did not respond correctly. HTTP code: ${http_code}"
            echo "=== docker ps ==="
            docker ps -a || true
            echo "=== docker logs ${CONTAINER_NAME} ==="
            docker logs "${CONTAINER_NAME}" || true
            exit 1
          fi

      - name: Cleanup containers
        if: always()
        run: |
          echo "Stopping and removing test containers..."
          docker stop ci-test-frontend ci-backend-mock || true
          docker rm ci-test-frontend ci-backend-mock || true
          docker network rm ci-net-${{ github.run_id }} || true

  Update-manifests:
    name: Update Manifests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Download context artifact
        uses: actions/download-artifact@v4
        with:
          name: job-context-frontend

      - name: Load context into environment
        # Make the build metadata available as environment variables.
        shell: bash
        run: cat context.env >> $GITHUB_ENV

      - name: Checkout manifests repo
        # Check out the manifests repo so we can edit and push values files.
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq and Helm
        # Install tools needed to update YAML values and lint charts.
        run: |
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update manifests and lint Helm chart
        working-directory: manifests
        env:
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
          IMAGE_TAG:  ${{ env.IMAGE_TAG_ONLY }}
          SUFFIX:     ${{ env.VALUES_SUFFIX }}
          BRANCH:     ${{ env.MANIFESTS_BRANCH }}
          K8S_NS:     ${{ env.K8S_NS }}
        shell: bash
        run: |
          set -euo pipefail
          FRONTEND_FILE="values/frontend/${SUFFIX}.yaml"
          BACKEND_FILE="values/backend/${SUFFIX}.yaml"

          # sanity check
          test -f "${FRONTEND_FILE}" || { echo "::error::Missing ${FRONTEND_FILE} in manifests repo"; exit 1; }

          # Update frontend values with image and runtime env variables pointing to backend service.
          yq -i "
            .image.repository = strenv(IMAGE_REPO) |
            .image.tag = strenv(IMAGE_TAG) |
            .env.plain.BACKEND_SERVICE_HOST = \"$(yq -r '.fullnameOverride // .app.name // \"backend\"' "${BACKEND_FILE}")\" |
            .env.plain.BACKEND_SERVICE_PORT = \"$(yq -r '.service.port // 3000' "${BACKEND_FILE}")\"
          " "${FRONTEND_FILE}"

          # Lint the chart to catch errors before committing
          helm lint charts/frontend --values "${FRONTEND_FILE}" || { echo "::error::helm lint failed for frontend"; exit 1; }

          # Render templates to verify render success
          helm template frontend charts/frontend --values "${FRONTEND_FILE}" >/dev/null

          # Push changes back
          git remote set-url origin "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ secrets.MANIFESTS_REPO }}.git"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "${BRANCH}"
          git rebase origin/"${BRANCH}" || { git rebase --abort || true; git pull --no-rebase || true; }

          git add "${FRONTEND_FILE}"
          git commit -m "ci: frontend ${SUFFIX} -> ${IMAGE_REPO}:${IMAGE_TAG}" || echo "No changes to commit"
          git push origin "${BRANCH}"
