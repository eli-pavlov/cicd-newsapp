name: Build & Push Frontend Image

on:
  repository_dispatch:
    types: [build-frontend]
  push:
    branches: [main, development]  # optional convenience
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the source (backend) repository"
        required: true
        default: "ghGill/newsAppFront"
        type: string
      source_ref:
        description: "Ref to build (HEAD, branch, tag, or commit SHA)"
        required: true
        default: "HEAD"
        type: string
      app_name:
        description: "App name used in image name"
        required: true
        default: "newsapp-backend"
        type: string

permissions:
  contents: read
  packages: write

env:
  MANIFEST_APP_DEFAULT: newsapp-frontend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (infra repo)
        uses: actions/checkout@v4

      - name: Resolve context from dispatch payload
        id: ctx
        shell: bash
        run: |
          APP="${{ github.event.client_payload.APP_NAME }}"
          BRANCH="${{ github.event.client_payload.BRANCH_NAME }}"
          COMMIT="${{ github.event.client_payload.COMMIT_SHA }}"
          SHORT="${{ github.event.client_payload.SHORT_SHA }}"

          # Optional FE build-time config for Vite (baked during build)
          VITE_SERVER_URL="${{ github.event.client_payload.VITE_SERVER_URL }}"
          VITE_NEWS_INTERVAL_IN_MIN="${{ github.event.client_payload.VITE_NEWS_INTERVAL_IN_MIN }}"

          [ -z "$APP" ] && APP="${MANIFEST_APP_DEFAULT}"
          [ -z "$BRANCH" ] && BRANCH="${GITHUB_REF_NAME}"
          [ -z "$COMMIT" ] && COMMIT="${GITHUB_SHA}"
          [ -z "$SHORT" ] && SHORT="${COMMIT:0:7}"

          test -n "${BRANCH}" && test -n "${COMMIT}" && test -n "${SHORT}"

          if [ "$BRANCH" = "main" ]; then
            TAG="latest-${SHORT}"
            LATEST="true"
            OVERLAY="production"
          else
            TAG="dev-${SHORT}"
            LATEST="false"
            OVERLAY="development"
          fi

          IMAGE="${DOCKERHUB_USER}/${APP}"

          echo "app=$APP"           >> $GITHUB_OUTPUT
          echo "branch=$BRANCH"     >> $GITHUB_OUTPUT
          echo "commit=$COMMIT"     >> $GITHUB_OUTPUT
          echo "short=$SHORT"       >> $GITHUB_OUTPUT
          echo "tag=$TAG"           >> $GITHUB_OUTPUT
          echo "latest=$LATEST"     >> $GITHUB_OUTPUT
          echo "overlay=$OVERLAY"   >> $GITHUB_OUTPUT
          echo "image=$IMAGE"       >> $GITHUB_OUTPUT

          # Pass-through FE build args only if provided
          if [ -n "$VITE_SERVER_URL" ]; then
            echo "vite_server_url=$VITE_SERVER_URL" >> $GITHUB_OUTPUT
          fi
          if [ -n "$VITE_NEWS_INTERVAL_IN_MIN" ]; then
            echo "vite_news_interval=$VITE_NEWS_INTERVAL_IN_MIN" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # If Vite args are set in the payload, bake them in; otherwise build plain.
          build-args: |
            ${{ steps.ctx.outputs.vite_server_url && format('VITE_SERVER_URL={0}', steps.ctx.outputs.vite_server_url) || '' }}
            ${{ steps.ctx.outputs.vite_news_interval && format('VITE_NEWS_INTERVAL_IN_MIN={0}', steps.ctx.outputs.vite_news_interval) || '' }}
          tags: |
            ${{ steps.ctx.outputs.image }}:${{ steps.ctx.outputs.tag }}
            ${{ steps.ctx.outputs.latest == 'true' && format('{0}:latest', steps.ctx.outputs.image) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ steps.ctx.outputs.commit }}

      # -- Helm deploy will be added in the next step --
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq
        run: |
          YQ_VERSION=v4.44.1
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Update frontend dev values (image + VITE_* envs)
        working-directory: manifests
        env:
          IMAGE_REPO: ghcr.io/eli-pavlov/newsapp/frontend
          IMAGE_TAG:  ${{ github.sha }}
          NODE2_IP:   ${{ vars.NODE2_IP }}
        run: |
          SERVER_URL="http://${NODE2_IP}:30001"

          yq -i '
            .image.repository = strenv(IMAGE_REPO) |
            .image.tag        = strenv(IMAGE_TAG)   |
            .env.plain.VITE_SERVER_URL = strenv(SERVER_URL) |
            .env.plain.VITE_NEWS_INTERVAL_IN_MIN = "5"
          ' values/frontend/dev.yaml

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add values/frontend/dev.yaml
          git commit -m "ci: frontend dev -> ${IMAGE_REPO}:${IMAGE_TAG}, VITE_SERVER_URL=${SERVER_URL}" || echo "No changes"
          git push origin main
