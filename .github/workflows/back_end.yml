name: Build & Push Backend Image

on:
  repository_dispatch:
    types: [build-backend]
  push:
    branches: [main, development]  # optional convenience

permissions:
  contents: read
  packages: write

env:
  # Defaults/fallbacks; image name is computed from payload + DockerHub user
  MANIFEST_APP_DEFAULT: newsapp-backend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (infra repo)
        uses: actions/checkout@v4

      - name: Resolve context from dispatch payload
        id: ctx
        shell: bash
        env:
          PROD_OVERLAY_NAME: production   # kept for future Helm stage (ignored now)
          DEV_OVERLAY_NAME: development   # kept for future Helm stage (ignored now)
        run: |
          # Prefer repository_dispatch payload, fallback to GitHub context
          APP="${{ github.event.client_payload.APP_NAME }}"
          BRANCH="${{ github.event.client_payload.BRANCH_NAME }}"
          COMMIT="${{ github.event.client_payload.COMMIT_SHA }}"
          SHORT="${{ github.event.client_payload.SHORT_SHA }}"

          [ -z "$APP" ] && APP="${MANIFEST_APP_DEFAULT}"
          [ -z "$BRANCH" ] && BRANCH="${GITHUB_REF_NAME}"
          [ -z "$COMMIT" ] && COMMIT="${GITHUB_SHA}"
          [ -z "$SHORT" ] && SHORT="${COMMIT:0:7}"

          # Validate like your `test -n` check
          test -n "${BRANCH}" && test -n "${COMMIT}" && test -n "${SHORT}"

          # Tagging (main -> latest-<sha>, else dev-<sha>)
          if [ "$BRANCH" = "main" ]; then
            TAG="latest-${SHORT}"
            LATEST="true"
            OVERLAY="production"
          else
            TAG="dev-${SHORT}"
            LATEST="false"
            OVERLAY="development"
          fi

          IMAGE="${DOCKERHUB_USER}/${APP}"

          echo "app=$APP"           >> $GITHUB_OUTPUT
          echo "branch=$BRANCH"     >> $GITHUB_OUTPUT
          echo "commit=$COMMIT"     >> $GITHUB_OUTPUT
          echo "short=$SHORT"       >> $GITHUB_OUTPUT
          echo "tag=$TAG"           >> $GITHUB_OUTPUT
          echo "latest=$LATEST"     >> $GITHUB_OUTPUT
          echo "overlay=$OVERLAY"   >> $GITHUB_OUTPUT
          echo "image=$IMAGE"       >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.ctx.outputs.image }}:${{ steps.ctx.outputs.tag }}
            ${{ steps.ctx.outputs.latest == 'true' && format('{0}:latest', steps.ctx.outputs.image) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ steps.ctx.outputs.commit }}

      # -- Helm deploy will be added in the next step --
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install kubectl & yq
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          curl -L -o kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -L -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          YQ_VERSION=v4.44.1
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Kube config
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kubeconfig
          echo "KUBECONFIG=$HOME/.kubeconfig" >> $GITHUB_ENV

      - name: Create/Update DB & backend secrets (dev namespace)
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          # MySQL credentials for DB pod
          kubectl -n backend create secret generic mysql-credentials \
            --from-literal=MYSQL_ROOT_PASSWORD="${DB_ROOT_PASSWORD}" \
            --from-literal=MYSQL_DATABASE="${DB_NAME}" \
            --from-literal=MYSQL_USER="${DB_USER}" \
            --from-literal=MYSQL_PASSWORD="${DB_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

          # Backend consumes DB_URI
          DB_HOST="mysql.backend.svc.cluster.local"
          DB_PORT="3306"
          DB_URI="mysql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
          kubectl -n backend create secret generic backend-secrets \
            --from-literal=DB_URI="${DB_URI}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update backend image tag in manifests (dev)
        working-directory: manifests
        env:
          IMAGE_REPO: ghcr.io/eli-pavlov/newsapp/backend
          IMAGE_TAG:  ${{ github.sha }}
        run: |
          yq -i '
            .image.repository = strenv(IMAGE_REPO) |
            .image.tag        = strenv(IMAGE_TAG)
          ' values/backend/dev.yaml

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add values/backend/dev.yaml
          git commit -m "ci: backend dev -> ${IMAGE_REPO}:${IMAGE_TAG}" || echo "No changes"
          git push origin main
