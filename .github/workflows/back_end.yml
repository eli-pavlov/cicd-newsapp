name: Build & Push Backend Image

on:
  repository_dispatch:
    types: [build-backend]
  push:
    branches: [main, development]   # optional convenience
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the source (backend) repository"
        required: true
        default: "ghGill/newsAppBackend"
        type: string
      source_ref:
        description: "Ref to build (HEAD, branch, tag, or commit SHA)"
        required: true
        default: "HEAD"
        type: string
      app_name:
        description: "App name used in image name"
        required: true
        default: "newsapp-backend"
        type: string

permissions:
  contents: read
  packages: write

env:
  # Defaults/fallbacks; image name is computed from payload or inputs + DockerHub user
  MANIFEST_APP_DEFAULT: newsapp-backend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (this repo / infra)
        uses: actions/checkout@v4

      - name: Resolve context (dispatch or manual)
        id: ctx
        shell: bash
        env:
          # inputs.* exist only for workflow_dispatch; fall back to repository_dispatch payload; finally GH context
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
        run: |
          set -euo pipefail

          # ---- Source repo/ref/app resolution ----
          SRC_REPO="${INP_REPO:-${{ github.event.client_payload.SOURCE_REPO || '' }}}"
          SRC_REF="${INP_REF:-${{ github.event.client_payload.BRANCH_NAME || '' }}}"
          APP="${INP_APP:-${{ github.event.client_payload.APP_NAME || '' }}}"

          # Fallbacks
          [ -z "${SRC_REPO}" ] && SRC_REPO="${{ github.repository }}"
          [ -z "${SRC_REF}" ] && SRC_REF="${GITHUB_REF_NAME:-HEAD}"
          [ -z "${APP}" ] && APP="${MANIFEST_APP_DEFAULT}"

          echo "src_repo=${SRC_REPO}" >> $GITHUB_OUTPUT
          echo "src_ref=${SRC_REF}"   >> $GITHUB_OUTPUT
          echo "app=${APP}"           >> $GITHUB_OUTPUT

          # ---- Image repo ----
          IMAGE="${DOCKERHUB_USER}/${APP}"
          echo "image=${IMAGE}"       >> $GITHUB_OUTPUT

      - name: Prepare Git (to clone source repo)
        run: |
          git config --global advice.detachedHead false

      - name: Clone source repo
        id: clone
        env:
          SRC_REPO: ${{ steps.ctx.outputs.src_repo }}
          SRC_REF:  ${{ steps.ctx.outputs.src_ref }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          # Use token if available (private repos)
          if [ -n "${GH_TOKEN:-}" ]; then
            GIT_URL="https://${GH_TOKEN}@github.com/${SRC_REPO}.git"
          else
            GIT_URL="https://github.com/${SRC_REPO}.git"
          fi

          git clone --no-tags --filter=blob:none "$GIT_URL" src
          cd src
          git fetch --all --tags --prune

          # If user asked for HEAD, resolve default branch
          if [ "${SRC_REF}" = "HEAD" ]; then
            DEF_REMOTE_HEAD=$(git symbolic-ref --short refs/remotes/origin/HEAD | cut -d/ -f2 || true)
            if [ -z "${DEF_REMOTE_HEAD}" ]; then
              # Fallback to main if origin/HEAD is missing
              DEF_REMOTE_HEAD="main"
            fi
            git checkout "origin/${DEF_REMOTE_HEAD}"
          else
            # Accept branch name, tag, or commit SHA
            if git rev-parse -q --verify "origin/${SRC_REF}" >/dev/null; then
              git checkout "origin/${SRC_REF}"
            elif git rev-parse -q --verify "refs/tags/${SRC_REF}" >/dev/null; then
              git checkout "refs/tags/${SRC_REF}"
            else
              # Try as a raw SHA or local ref
              git checkout "${SRC_REF}"
            fi
          fi

          # Compute branch-ish name (may be 'HEAD' when detached)
          BRANCH="$(git rev-parse --abbrev-ref HEAD || true)"
          COMMIT="$(git rev-parse HEAD)"
          SHORT="${COMMIT:0:7}"

          # Tagging (main -> latest-<sha>, else dev-<sha>)
          if [ "${BRANCH}" = "main" ]; then
            TAG="latest-${SHORT}"
            LATEST="true"
            OVERLAY="production"
          else
            TAG="dev-${SHORT}"
            LATEST="false"
            OVERLAY="development"
          fi

          echo "branch=${BRANCH}"   >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}"   >> $GITHUB_OUTPUT
          echo "short=${SHORT}"     >> $GITHUB_OUTPUT
          echo "tag=${TAG}"         >> $GITHUB_OUTPUT
          echo "latest=${LATEST}"   >> $GITHUB_OUTPUT
          echo "overlay=${OVERLAY}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Show backend files
        run: |
          ls -la backend || true
          echo "--- backend/.dockerignore ---"
          [ -f backend/.dockerignore ] && sed -n '1,200p' backend/.dockerignore || echo "(none)"

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.ctx.outputs.image }}:${{ steps.clone.outputs.tag }}
            ${{ steps.clone.outputs.latest == 'true' && format('{0}:latest', steps.ctx.outputs.image) || '' }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.clone.outputs.commit }}

      # -------------------------------------------------------------------
      # K8s + manifests update (kept as in your original, but aligned to use
      # the image we just pushed above)
      # -------------------------------------------------------------------
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install kubectl & yq
        run: |
          set -e
          sudo apt-get update -y && sudo apt-get install -y jq
          curl -L -o kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -L -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          YQ_VERSION=v4.44.1
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Kube config
        run: |
          set -e
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kubeconfig
          echo "KUBECONFIG=$HOME/.kubeconfig" >> $GITHUB_ENV

          # Prefer ExternalIP; fall back to InternalIP
          get_node_ip () {
            local selector="$1"
            local ext
            ext=$(kubectl get node -l "$selector" -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
            if [ -n "$ext" ]; then
              echo "$ext"
            else
              kubectl get node -l "$selector" -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}'
            fi
          }

          NODE1_IP=$(get_node_ip 'kubernetes.io/hostname=node-1' || true)
          NODE2_IP=$(get_node_ip 'kubernetes.io/hostname=node-2' || true)

          echo "Node1 IP: $NODE1_IP"
          echo "Node2 IP: $NODE2_IP"

      - name: Create/Update DB & backend secrets (dev namespace)
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          set -e
          # MySQL credentials for DB pod
          kubectl -n backend create secret generic mysql-credentials \
            --from-literal=MYSQL_ROOT_PASSWORD="${DB_ROOT_PASSWORD}" \
            --from-literal=MYSQL_DATABASE="${DB_NAME}" \
            --from-literal=MYSQL_USER="${DB_USER}" \
            --from-literal=MYSQL_PASSWORD="${DB_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

          # Backend consumes DB_URI
          DB_HOST="mysql.backend.svc.cluster.local"
          DB_PORT="3306"
          DB_URI="mysql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
          kubectl -n backend create secret generic backend-secrets \
            --from-literal=DB_URI="${DB_URI}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update backend image tag in manifests (dev)
        working-directory: manifests
        env:
          IMAGE_REPO: ${{ steps.ctx.outputs.image }}
          IMAGE_TAG:  ${{ steps.clone.outputs.tag }}
        run: |
          set -e
          # Adjust path to your actual values file(s) as needed:
          yq -i '
            .image.repository = strenv(IMAGE_REPO) |
            .image.tag        = strenv(IMAGE_TAG)
          ' values/backend/dev.yaml

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add values/backend/dev.yaml
          git commit -m "ci: backend dev -> ${IMAGE_REPO}:${IMAGE_TAG}" || echo "No changes"
          git push origin main
