# name: Build, Test, & Push Backend Image
# ---------------------------------------------------------------------
# Purpose:
# - CI workflow to build, multi-arch push, test, and update Kubernetes manifests
# - Designed to run on push to backend paths, repository_dispatch backend events,
#   and manual workflow_dispatch with inputs for remote source repo/ref
# Notes:
# - All original logic and indentation are preserved; only explanatory comments added.
# ---------------------------------------------------------------------

name: Build, Test, & Push Backend Image

on:
  repository_dispatch:
    types: [backend]
  push:
    branches: [main, development]
    paths:
      - "backend/**"
      - ".github/workflows/back_end.yml"
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the backend source repository"
        required: true
        default: "ghGill/newsAppBackend"
        type: string
      source_ref:
        description: "Ref to build (HEAD, branch, tag, or commit SHA)"
        required: true
        default: "main"
        type: string
      app_name:
        description: "App name used in image name"
        required: true
        default: "newsapp-backend"
        type: string

# Permissions block controls token scopes available to actions
# - contents: read is sufficient for checkout
# - packages: write required to push images using some registry actions (DockerHub login push)
permissions:
  contents: read
  packages: write

concurrency:
  # Group concurrency key prevents concurrent runs for the same group.
  # Using the workflow name provides coarse-grained grouping.
  # Consider including repo/branch for tighter scoping if needed.
  group: cicd-${{ github.workflow }}-manifests
  cancel-in-progress: false

env:
  # Default app name used if inputs/dispatch payload don't provide one
  MANIFEST_APP_DEFAULT: newsapp-backend
  # Docker Hub username is read from secrets at runtime
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  # Branch in manifests repository where updates are pushed
  MANIFESTS_BRANCH: main
  # Pin a specific yq release; consider validating checksum during install for supply-chain safety
  YQ_VERSION: v4.44.3

jobs:
  docker:
    # Condition ensures this job only runs for specific event types (push / manual / repo dispatch)
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'backend')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout (CI/CD repo)
        uses: actions/checkout@v4

      - name: Guard required secrets
        # This guard step fails early if required secrets are missing.
        # Early validation is important to avoid partially-completed runs that might behave unexpectedly.
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || \
             [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] || \
             [ -z "${{ secrets.MANIFESTS_REPO }}" ] || \
             [ -z "${{ secrets.GH_TOKEN }}" ]; then
            echo "::error::Missing one or more required secrets: DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, MANIFESTS_REPO, GH_TOKEN"
            exit 1
          fi

      - name: Resolve context
        id: ctx
        # Resolve inputs and repository_dispatch payload into canonical variables used later
        shell: bash
        env:
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
          CP_REPO:  ${{ github.event.client_payload.source_repo }}
          CP_REF:   ${{ github.event.client_payload.source_ref }}
          CP_APP:   ${{ github.event.client_payload.app_name }}
        run: |
          set -euo pipefail
          # Choose priority: explicit workflow_dispatch inputs -> repository_dispatch payload -> fallback defaults
          SRC_REPO="${INP_REPO:-${CP_REPO:-ghGill/newsAppBackend}}"
          SRC_REF="${INP_REF:-${CP_REF:-${GITHUB_REF_NAME:-main}}}"
          APP="${INP_APP:-${CP_APP:-$MANIFEST_APP_DEFAULT}}"
          IMAGE="${DOCKERHUB_USER}/${APP}"
          {
            # Export resolved values as step outputs for other steps to consume
            echo "src_repo=${SRC_REPO}"
            echo "src_ref=${SRC_REF}"
            echo "app=${APP}"
            echo "image=${IMAGE}"
          } >> "$GITHUB_OUTPUT"

      - name: Checkout backend source repo
        # Check out the backend source into a subdirectory `src` so we can build from it.
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.src_repo }}
          ref: ${{ steps.ctx.outputs.src_ref }}
          path: src

      - name: Prepare build context
        # Ensure a Dockerfile and .dockerignore are present in 'src/' for the build.
        shell: bash
        run: |
          set -euo pipefail
          
          # First, check if the source repo ('src') already has a Dockerfile.
          # If not, fall back to the one in this CI/CD repo.
          if [ -f src/Dockerfile ]; then
            echo "Dockerfile found in the source repository."
          elif [ -f backend/Dockerfile ]; then
            echo "Copying Dockerfile from CI/CD repository."
            cp backend/Dockerfile src/Dockerfile
          else
            echo "::error::No Dockerfile found in the source repo or the CI/CD repo."
            exit 1
          fi

          # Do the same for the .dockerignore file
          if [ -f src/.dockerignore ]; then
            echo ".dockerignore found in the source repository."
          elif [ -f backend/.dockerignore ]; then
            echo "Copying .dockerignore from CI/CD repository."
            cp backend/.dockerignore src/.dockerignore
          fi


      - name: Compute image tags
        id: compute-tags
        # Determine commit, short SHA, and tag naming convention (latest-<sha> or dev-<sha>)
        shell: bash
        run: |
          set -euo pipefail
          COMMIT=$(git -C src rev-parse HEAD)
          SHORT=${COMMIT:0:7}
          REF="${{ steps.ctx.outputs.src_ref }}"
          BASE="${REF##*/}"
          if [[ "$BASE" == "main" || "$BASE" == "master" ]]; then
            TAG="latest-${SHORT}"
            IS_LATEST="true"
          else
            TAG="dev-${SHORT}"
            IS_LATEST="false"
          fi
          {
            # Expose computed metadata to downstream steps
            echo "commit=${COMMIT}"
            echo "tag=${TAG}"
            echo "is_latest=${IS_LATEST}"
            echo "branch=${BASE}"
          } >> "$GITHUB_OUTPUT"

      - name: Resolve deploy environment
        id: deploy
        # Map is_latest => environment (prod/dev), Kubernetes namespace and corresponding values file suffix.
        shell: bash
        env:
          IS_LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          if [[ "${IS_LATEST}" == "true" ]]; then
            echo "env=prod" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=default" >> "$GITHUB_OUTPUT"
            echo "values_suffix=prod" >> "$GITHUB_OUTPUT"
          else
            echo "env=dev" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=development" >> "$GITHUB_OUTPUT"
            echo "values_suffix=dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        # QEMU is required for emulating other architectures when building multi-arch images.
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # Buildx is required for multi-arch builds and caching.
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        # Authenticate to Docker Hub before pushing images.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Assemble tags
        id: tags
        # Compose the list of tags to pass into build-push-action.
        shell: bash
        env:
          IMAGE: ${{ steps.ctx.outputs.image }}
          TAG:   ${{ steps.compute-tags.outputs.tag }}
          LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          {
            echo "tags<<EOF"
            echo "${IMAGE}:${TAG}"
            if [[ "${LATEST}" == "true" ]]; then
              echo "${IMAGE}:latest"
            fi
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build & Push (multi-arch)
        # Multi-arch build and push. Uses GitHub Actions cache for build layers.
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./src
          file: ./src/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            BACKEND_GIT_BRANCH=${{ steps.compute-tags.outputs.branch }}
            BACKEND_GIT_COMMIT=${{ steps.compute-tags.outputs.commit }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.compute-tags.outputs.commit }}

      # ADDED: Save context for downstream jobs as an artifact
      - name: Save context for downstream jobs
        # Persist lightweight metadata about the built image to an artifact for use by downstream jobs.
        shell: bash
        run: |
          echo "IMAGE_TAG=${{ steps.ctx.outputs.image }}:${{ steps.compute-tags.outputs.tag }}" > context.env
          echo "IMAGE_REPO=${{ steps.ctx.outputs.image }}" >> context.env
          echo "IMAGE_TAG_ONLY=${{ steps.compute-tags.outputs.tag }}" >> context.env
          echo "VALUES_SUFFIX=${{ steps.deploy.outputs.values_suffix }}" >> context.env
      
      - name: Upload context artifact
        # Upload the saved context so other jobs (test, update-manifests) can retrieve image info reliably.
        uses: actions/upload-artifact@v4
        with:
          name: job-context
          path: context.env

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: docker

    steps:
      # ADDED: Download the context artifact
      - name: Download context artifact
        uses: actions/download-artifact@v4
        with:
          name: job-context

      # ADDED: Load context from artifact into environment variables
      - name: Load context into environment
        # Append context.env to $GITHUB_ENV so env.* substitutions work in subsequent steps
        shell: bash
        run: cat context.env >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Postgres Database
        # Start a local Postgres container for integration tests.
        # Note: exposing DB port 5432 to the runner may conflict if another service uses that port.
        run: |
          docker run --name test-postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_DB=news_app \
            -p 5432:5432 \
            -d postgres:13

      - name: Pull the built image from registry
        # CORRECTED: Use the env var loaded from the artifact
        run: docker pull ${{ env.IMAGE_TAG }}

      - name: Run the application container
        # CORRECTED: Use the env var loaded from the artifact
        # Notes/risks:
        # - `--network host` gives container direct access to host network; port mappings (-p) are ignored in host mode on Linux.
        #   This can be convenient for tests but has security implications — the container can access host services and ports.
        # - If stricter isolation is required, consider using a user-defined bridge network and linking containers there.
        run: |
          docker run \
            --detach \
            --name test-backend \
            --publish 3000:3000 \
            --network host \
            -e DB_ENGINE_TYPE=POSTGRES \
            -e DB_PROTOCOL=postgres \
            -e DB_USER=postgres \
            -e DB_PASSWORD=postgres \
            -e DB_HOST=localhost \
            -e DB_PORT=5432 \
            -e DB_NAME=news_app \
            -e STORAGE_TYPE=DISK \
            ${{ env.IMAGE_TAG }}

      - name: Wait for services to start
        run: |
          echo "Waiting for the database and server to initialize..."
          # This is a simple sleep; for more robust runs use a retry loop + health checks to reduce flakiness.
          sleep 15

      - name: Check server health
        # curl will exit non-zero if the endpoint returns non-2xx; this is used as the test assertion.
        run: |
          echo "Pinging server health endpoint..."
          curl --fail http://localhost:3000/db/available

      - name: Cleanup containers
        # Ensure containers are removed even if tests fail.
        if: always()
        run: |
          echo "Stopping and removing test containers..."
          docker stop test-backend test-postgres
          docker rm test-backend test-postgres
  
  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: test

    steps:
      # ADDED: Download the context artifact
      - name: Download context artifact
        uses: actions/download-artifact@v4
        with:
          name: job-context

      # ADDED: Load context from artifact into environment variables
      - name: Load context into environment
        shell: bash
        run: cat context.env >> $GITHUB_ENV
        
      - name: Checkout manifests repo
        # Check out the manifests repository into `manifests/` so we can edit and push values files.
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq
        # Install yq binary; consider validating SHA256 sum after download to ensure binary integrity.
        run: |
          set -e
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Install Helm
        # Uses upstream install script; for reproducibility you may pin script commit or install a specific binary release.
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Update manifests and lint Helm chart
        working-directory: manifests
        # CORRECTED: Use env vars loaded from the artifact
        env:
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
          IMAGE_TAG:  ${{ env.IMAGE_TAG_ONLY }}
          SUFFIX:     ${{ env.VALUES_SUFFIX }}
          BRANCH:     ${{ env.MANIFESTS_BRANCH }}
        shell: bash
        run: |
          set -euo pipefail
          BACKEND_FILE="values/backend/${SUFFIX}.yaml"
          test -f "${BACKEND_FILE}" || { echo "::error::Missing ${BACKEND_FILE} in manifests repo"; exit 1; }
          
          # Update the image repository and tag in the values file using yq.
          yq -i '.image.repository = strenv(IMAGE_REPO) | .image.tag = strenv(IMAGE_TAG)' "${BACKEND_FILE}"
          
          echo "Linting backend chart..."
          # Helm lint helps catch common chart problems before pushing manifests.
          helm lint charts/backend --values "${BACKEND_FILE}" || { echo "::error::helm lint failed for backend"; exit 1; }

          echo "Rendering backend template..."
          # Render templates to ensure chart templates render successfully with the provided values.
          helm template backend charts/backend --values "${BACKEND_FILE}" >/dev/null

          # Set up authenticated git remote. Using a personal or machine token here requires the token to have repo:contents and push rights.
          git remote set-url origin "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ secrets.MANIFESTS_REPO }}.git"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "${BRANCH}"
          # Rebase onto latest branch to avoid fast-forward conflicts; fall back to pull if rebase fails.
          git rebase origin/"${BRANCH}" || { git rebase --abort || true; git pull --no-rebase || true; }
          
          git add "${BACKEND_FILE}"
          # Commit only if changes exist; the `|| echo "No changes to commit"` avoids failing the step when nothing changed.
          git commit -m "ci(manifests): update backend ${SUFFIX} -> ${IMAGE_REPO}:${IMAGE_TAG}" || echo "No changes to commit"
          git push origin "${BRANCH}"
