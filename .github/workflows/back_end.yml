name: Build, Push, & Test Backend Image

on:
  repository_dispatch:
    types: [backend]
  push:
    branches: [main, development]
    paths:
      - "backend/**"
      - ".github/workflows/back_end.yml"
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the backend source repository"
        required: true
        default: "ghGill/newsAppBackend"
        type: string
      source_ref:
        description: "Ref to build (HEAD, branch, tag, or commit SHA)"
        required: true
        default: "main"
        type: string
      app_name:
        description: "App name used in image name"
        required: true
        default: "newsapp-backend"
        type: string

permissions:
  contents: read
  packages: write

concurrency:
  group: cicd-${{ github.workflow }}-manifests
  cancel-in-progress: false

env:
  MANIFEST_APP_DEFAULT: newsapp-backend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  MANIFESTS_BRANCH: main
  YQ_VERSION: v4.44.3

jobs:
  docker:
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'backend')
    runs-on: ubuntu-latest
    
    outputs:
      image_tag: ${{ steps.ctx.outputs.image }}:${{ steps.compute-tags.outputs.tag }}
      image_repo: ${{ steps.ctx.outputs.image }}
      image_tag_only: ${{ steps.compute-tags.outputs.tag }}
      values_suffix: ${{ steps.deploy.outputs.values_suffix }}

    steps:
      - name: Checkout (CI/CD repo)
        uses: actions/checkout@v4

      - name: Guard required secrets
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || \
             [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] || \
             [ -z "${{ secrets.MANIFESTS_REPO }}" ] || \
             [ -z "${{ secrets.GH_TOKEN }}" ]; then
            echo "::error::Missing one or more required secrets: DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, MANIFESTS_REPO, GH_TOKEN"
            exit 1
          fi

      - name: Resolve context
        id: ctx
        shell: bash
        env:
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
          CP_REPO:  ${{ github.event.client_payload.source_repo }}
          CP_REF:   ${{ github.event.client_payload.source_ref }}
          CP_APP:   ${{ github.event.client_payload.app_name }}
        run: |
          set -euo pipefail
          SRC_REPO="${INP_REPO:-${CP_REPO:-ghGill/newsAppBackend}}"
          SRC_REF="${INP_REF:-${CP_REF:-${GITHUB_REF_NAME:-main}}}"
          APP="${INP_APP:-${CP_APP:-$MANIFEST_APP_DEFAULT}}"
          IMAGE="${DOCKERHUB_USER}/${APP}"
          {
            echo "src_repo=${SRC_REPO}"
            echo "src_ref=${SRC_REF}"
            echo "app=${APP}"
            echo "image=${IMAGE}"
          } >> "$GITHUB_OUTPUT"

      - name: Checkout backend source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.src_repo }}
          ref: ${{ steps.ctx.outputs.src_ref }}
          path: src

      - name: Prepare build context
        shell: bash
        run: |
          set -euo pipefail
          if [ -f src/Dockerfile ]; then
            echo "Dockerfile present in src/"
          elif [ -f backend/Dockerfile ]; then
            cp backend/Dockerfile src/Dockerfile
          else
            echo "::error::No Dockerfile found (expected src/Dockerfile or backend/Dockerfile)"
            exit 1
          fi
          if [ -f src/.dockerignore ]; then
            echo ".dockerignore found in src/"
          elif [ -f backend/.dockerignore ]; then
            cp backend/.dockerignore src/.dockerignore
          fi

      - name: Compute image tags
        id: compute-tags
        shell: bash
        run: |
          set -euo pipefail
          COMMIT=$(git -C src rev-parse HEAD)
          SHORT=${COMMIT:0:7}
          REF="${{ steps.ctx.outputs.src_ref }}"
          BASE="${REF##*/}"
          if [[ "$BASE" == "main" || "$BASE" == "master" ]]; then
            TAG="latest-${SHORT}"
            IS_LATEST="true"
          else
            TAG="dev-${SHORT}"
            IS_LATEST="false"
          fi
          {
            echo "commit=${COMMIT}"
            echo "tag=${TAG}"
            echo "is_latest=${IS_LATEST}"
            echo "branch=${BASE}"
          } >> "$GITHUB_OUTPUT"

      - name: Resolve deploy environment
        id: deploy
        shell: bash
        env:
          IS_LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          if [[ "${IS_LATEST}" == "true" ]]; then
            echo "env=prod" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=default" >> "$GITHUB_OUTPUT"
            echo "values_suffix=prod" >> "$GITHUB_OUTPUT"
          else
            echo "env=dev" >> "$GITHUB_OUTPUT"
            echo "k8s_ns=development" >> "$GITHUB_OUTPUT"
            echo "values_suffix=dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Assemble tags
        id: tags
        shell: bash
        env:
          IMAGE: ${{ steps.ctx.outputs.image }}
          TAG:   ${{ steps.compute-tags.outputs.tag }}
          LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          {
            echo "tags<<EOF"
            echo "${IMAGE}:${TAG}"
            if [[ "${LATEST}" == "true" ]]; then
              echo "${IMAGE}:latest"
            fi
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./src
          file: ./src/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            BACKEND_GIT_BRANCH=${{ steps.compute-tags.outputs.branch }}
            BACKEND_GIT_COMMIT=${{ steps.compute-tags.outputs.commit }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.compute-tags.outputs.commit }}

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: docker
    # ADDED: Pass outputs from the 'docker' job through to the next job
    outputs:
      image_repo: ${{ needs.docker.outputs.image_repo }}
      image_tag_only: ${{ needs.docker.outputs.image_tag_only }}
      values_suffix: ${{ needs.docker.outputs.values_suffix }}

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Postgres Database
        run: |
          docker run --name test-postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_DB=news_app \
            -p 5432:5432 \
            -d postgres:13

      - name: Pull the built image from registry
        run: docker pull ${{ needs.docker.outputs.image_tag }}

      - name: Run the application container
        run: |
          docker run \
            --detach \
            --name test-backend \
            --publish 3000:3000 \
            --network host \
            -e DB_ENGINE_TYPE=POSTGRES \
            -e DB_PROTOCOL=postgres \
            -e DB_USER=postgres \
            -e DB_PASSWORD=postgres \
            -e DB_HOST=localhost \
            -e DB_PORT=5432 \
            -e DB_NAME=news_app \
            -e STORAGE_TYPE=DISK \
            ${{ needs.docker.outputs.image_tag }}

      - name: Wait for services to start
        run: |
          echo "Waiting for the database and server to initialize..."
          sleep 15

      - name: Check server health
        run: |
          echo "Pinging server health endpoint..."
          curl --fail http://localhost:3000/db/available

      - name: Cleanup containers
        if: always()
        run: |
          echo "Stopping and removing test containers..."
          docker stop test-backend test-postgres
          docker rm test-backend test-postgres
  
  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq
        run: |
          set -e
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Update manifests and lint Helm chart
        working-directory: manifests
        # CORRECTED: These env vars now correctly reference the outputs from the 'test' job
        env:
          IMAGE_REPO: ${{ needs.test.outputs.image_repo }}
          IMAGE_TAG:  ${{ needs.test.outputs.image_tag_only }}
          SUFFIX:     ${{ needs.test.outputs.values_suffix }}
          BRANCH:     ${{ env.MANIFESTS_BRANCH }}
        shell: bash
        run: |
          set -euo pipefail
          BACKEND_FILE="values/backend/${SUFFIX}.yaml"
          test -f "${BACKEND_FILE}" || { echo "::error::Missing ${BACKEND_FILE} in manifests repo"; exit 1; }
          
          yq -i '.image.repository = strenv(IMAGE_REPO) | .image.tag = strenv(IMAGE_TAG)' "${BACKEND_FILE}"
          
          echo "Linting backend chart..."
          helm lint charts/backend --values "${BACKEND_FILE}" || { echo "::error::helm lint failed for backend"; exit 1; }

          echo "Rendering backend template..."
          helm template backend charts/backend --values "${BACKEND_FILE}" >/dev/null

          git remote set-url origin "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ secrets.MANIFESTS_REPO }}.git"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "${BRANCH}"
          git rebase origin/"${BRANCH}" || { git rebase --abort || true; git pull --no-rebase || true; }
          
          git add "${BACKEND_FILE}"
          git commit -m "ci(manifests): update backend ${SUFFIX} -> ${IMAGE_REPO}:${IMAGE_TAG}" || echo "No changes to commit"
          git push origin "${BRANCH}"

