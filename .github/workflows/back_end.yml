name: Build & Push Backend Image

on:
  repository_dispatch:
    types: [build-backend]
  push:
    branches: [main, development]
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the source (backend) repository"
        required: true
        default: "ghGill/newsAppBackend"
        type: string
      source_ref:
        description: "Ref to build (HEAD, branch, tag, or commit SHA)"
        required: true
        default: "HEAD"
        type: string
      app_name:
        description: "App name used in image name"
        required: true
        default: "newsapp-backend"
        type: string

permissions:
  contents: read
  packages: write

env:
  MANIFEST_APP_DEFAULT: newsapp-backend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (this repo / infra)
        uses: actions/checkout@v4

      - name: Resolve context (dispatch or manual)
        id: ctx
        shell: bash
        env:
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
        run: |
          set -euo pipefail

          SRC_REPO="${INP_REPO:-${{ github.event.client_payload.SOURCE_REPO || '' }}}"
          SRC_REF="${INP_REF:-${{ github.event.client_payload.BRANCH_NAME || '' }}}"
          APP="${INP_APP:-${{ github.event.client_payload.APP_NAME || '' }}}"

          [ -z "${SRC_REPO}" ] && SRC_REPO="ghGill/newsAppBackend"
          [ -z "${SRC_REF}" ] && SRC_REF="${GITHUB_REF_NAME:-HEAD}"
          [ -z "${APP}" ] && APP="${MANIFEST_APP_DEFAULT}"

          echo "src_repo=${SRC_REPO}" >> $GITHUB_OUTPUT
          echo "src_ref=${SRC_REF}"  >> $GITHUB_OUTPUT
          echo "app=${APP}"          >> $GITHUB_OUTPUT

          IMAGE="${DOCKERHUB_USER}/${APP}"
          echo "image=${IMAGE}"      >> $GITHUB_OUTPUT

      - name: Checkout backend source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.src_repo }}
          ref: ${{ steps.ctx.outputs.src_ref }}
          path: src

      - name: Compute image tags
        id: compute-tags
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          COMMIT=$(git rev-parse HEAD)
          SHORT=${COMMIT:0:7}
          BRANCH=$(git rev-parse --abbrev-ref HEAD)

          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            TAG="latest-${SHORT}"
            IS_LATEST="true"
          else
            TAG="dev-${SHORT}"
            IS_LATEST="false"
          fi

          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "is_latest=${IS_LATEST}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./src
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.ctx.outputs.image }}:${{ steps.compute-tags.outputs.tag }}
            ${{ steps.compute-tags.outputs.is_latest == 'true' && format('{0}:latest', steps.ctx.outputs.image) || '' }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.compute-tags.outputs.commit }}

      # -------------------------------------------------------------------
      # Manifests update (GitOps only) + Sealed Secrets (no cluster access)
      # -------------------------------------------------------------------
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq & kubeseal
        run: |
          set -e
          YQ_VERSION=v4.44.1
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          KUBESEAL_VER=0.27.1
          curl -sL "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VER}/kubeseal-${KUBESEAL_VER}-linux-amd64.tar.gz" \
            | tar xz kubeseal
          sudo mv kubeseal /usr/local/bin/

      - name: Restore Sealed Secrets public cert
        run: |
          mkdir -p /tmp/cert
          echo "${{ secrets.SEALED_SECRETS_CERT }}" | base64 -d > /tmp/cert/sealed-secrets.pem

      - name: Create input Secret YAMLs (dev, namespace=backend)
        id: mksecrets
        env:
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          set -euo pipefail
          DB_HOST="mysql.backend.svc.cluster.local"
          DB_PORT="3306"
          DB_URI="mysql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"

          cat > /tmp/mysql-secret.yaml <<'YAML'
          apiVersion: v1
          kind: Secret
          metadata:
            name: mysql-credentials
            namespace: backend
          type: Opaque
          stringData:
            MYSQL_ROOT_PASSWORD: __ROOT__
            MYSQL_DATABASE: __DB__
            MYSQL_USER: __USER__
            MYSQL_PASSWORD: __PASS__
          YAML
          sed -i "s|__ROOT__|${DB_ROOT_PASSWORD//|/\\|}|" /tmp/mysql-secret.yaml
          sed -i "s|__DB__|${DB_NAME//|/\\|}|" /tmp/mysql-secret.yaml
          sed -i "s|__USER__|${DB_USER//|/\\|}|" /tmp/mysql-secret.yaml
          sed -i "s|__PASS__|${DB_PASSWORD//|/\\|}|" /tmp/mysql-secret.yaml

          cat > /tmp/backend-secret.yaml <<'YAML'
          apiVersion: v1
          kind: Secret
          metadata:
            name: backend-secrets
            namespace: backend
          type: Opaque
          stringData:
            DB_URI: __URI__
          YAML
          sed -i "s|__URI__|${DB_URI//|/\\|}|" /tmp/backend-secret.yaml

      - name: Seal secrets offline (one cert for all)
        run: |
          kubeseal --cert /tmp/cert/sealed-secrets.pem --format yaml < /tmp/mysql-secret.yaml    > /tmp/mysql-credentials.sealed.yaml
          kubeseal --cert /tmp/cert/sealed-secrets.pem --format yaml < /tmp/backend-secret.yaml  > /tmp/backend-secrets.sealed.yaml

      - name: Write sealed files + bump backend image (dev)
        working-directory: manifests
        env:
          IMAGE_REPO: ${{ steps.ctx.outputs.image }}
          IMAGE_TAG:  ${{ steps.compute-tags.outputs.tag }}
        run: |
          set -e
          mkdir -p sealed/backend/dev
          mv /tmp/mysql-credentials.sealed.yaml sealed/backend/dev/mysql-credentials.sealed.yaml
          mv /tmp/backend-secrets.sealed.yaml     sealed/backend/dev/backend-secrets.sealed.yaml

          # Update dev values (Helm)
          yq -i '
            .image.repository = strenv(IMAGE_REPO) |
            .image.tag        = strenv(IMAGE_TAG)
          ' values/backend/dev.yaml

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add sealed/backend/dev/*.yaml values/backend/dev.yaml
          git commit -m "ci: backend dev -> ${IMAGE_REPO}:${IMAGE_TAG} (refresh sealed secrets)" || echo "No changes"
          git push origin main
