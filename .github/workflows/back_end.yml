name: Build & Push Backend Image

on:
  repository_dispatch:
    types: [build-backend]
  push:
    branches: [main, development]
    paths:
      - "backend/**"
      - ".github/workflows/back_end.yml"
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Owner/repo of the backend source repository"
        required: true
        default: "ghGill/newsAppBackend"
        type: string
      source_ref:
        description: "Ref to build (HEAD, branch, tag, or commit SHA)"
        required: true
        default: "HEAD"
        type: string
      app_name:
        description: "App name used in image name"
        required: true
        default: "newsapp-backend"
        type: string

permissions:
  contents: read
  packages: write

env:
  MANIFEST_APP_DEFAULT: newsapp-backend
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (infra repo)
        uses: actions/checkout@v4

      - name: Resolve context (dispatch/manual inputs)
        id: ctx
        shell: bash
        env:
          INP_REPO: ${{ inputs.source_repo }}
          INP_REF:  ${{ inputs.source_ref }}
          INP_APP:  ${{ inputs.app_name }}
        run: |
          set -euo pipefail
          SRC_REPO="${INP_REPO:-${{ github.event.client_payload.source_repo || '' }}}"
          SRC_REF="${INP_REF:-${{ github.event.client_payload.source_ref  || '' }}}"
          APP="${INP_APP:-${{ github.event.client_payload.app_name       || '' }}}"
          [ -z "${SRC_REPO}" ] && SRC_REPO="ghGill/newsAppBackend"
          [ -z "${SRC_REF}" ] && SRC_REF="${GITHUB_REF_NAME:-HEAD}"
          [ -z "${APP}" ] && APP="${MANIFEST_APP_DEFAULT}"
          echo "src_repo=${SRC_REPO}" >> $GITHUB_OUTPUT
          echo "src_ref=${SRC_REF}"  >> $GITHUB_OUTPUT
          echo "app=${APP}"          >> $GITHUB_OUTPUT
          IMAGE="${DOCKERHUB_USER}/${APP}"
          echo "image=${IMAGE}"      >> $GITHUB_OUTPUT

      - name: Checkout backend source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.src_repo }}
          ref: ${{ steps.ctx.outputs.src_ref }}
          path: src

      - name: Place Dockerfile into source context
        run: cp backend/Dockerfile src/Dockerfile

      - name: Compute image tags
        id: compute-tags
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          COMMIT=$(git rev-parse HEAD)
          SHORT=${COMMIT:0:7}
          BRANCH=$(git rev-parse --abbrev-ref HEAD || echo "")
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            TAG="latest-${SHORT}"
            IS_LATEST="true"
          else
            TAG="dev-${SHORT}"
            IS_LATEST="false"
          fi
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "is_latest=${IS_LATEST}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT

      - name: Resolve deploy environment
        id: deploy
        shell: bash
        env:
          IS_LATEST: ${{ steps.compute-tags.outputs.is_latest }}
        run: |
          set -euo pipefail
          if [[ "${IS_LATEST}" == "true" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
            echo "k8s_ns=default" >> $GITHUB_OUTPUT
            echo "values_suffix=prod" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
            echo "k8s_ns=development" >> $GITHUB_OUTPUT
            echo "values_suffix=dev" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./src
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.ctx.outputs.image }}:${{ steps.compute-tags.outputs.tag }}
            ${{ steps.compute-tags.outputs.is_latest == 'true' && format('{0}:latest', steps.ctx.outputs.image) || '' }}
          labels: |
            org.opencontainers.image.source=${{ steps.ctx.outputs.src_repo }}
            org.opencontainers.image.revision=${{ steps.compute-tags.outputs.commit }}

      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.MANIFESTS_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: manifests

      - name: Install yq
        run: |
          set -e
          YQ_VERSION=v4.44.1
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Bump backend image tag in manifests (nested under .backend)
        working-directory: manifests
        env:
          IMAGE_REPO: ${{ steps.ctx.outputs.image }}
          IMAGE_TAG:  ${{ steps.compute-tags.outputs.tag }}
          SUFFIX:     ${{ steps.deploy.outputs.values_suffix }}
        run: |
          set -euo pipefail
          VALUES_FILE="values/backend/${SUFFIX}.yaml"
          yq -i '
            .backend.image.repository = strenv(IMAGE_REPO) |
            .backend.image.tag        = strenv(IMAGE_TAG)
          ' "${VALUES_FILE}"

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "${VALUES_FILE}"
          git commit -m "ci: backend ${SUFFIX} -> ${IMAGE_REPO}:${IMAGE_TAG}" || echo "No changes"
          git push origin main
